<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mrmcc3</title>
    <link>https://mrmcc3.github.io/post/</link>
    <description>Recent content in Posts on mrmcc3</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 20 Jun 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrmcc3.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reading configuration with Aero</title>
      <link>https://mrmcc3.github.io/post/aero-config/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mrmcc3.github.io/post/aero-config/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/juxt/aero&#34;&gt;Aero&lt;/a&gt; is a nice configuration library for clojure. Its &lt;a href=&#34;https://github.com/juxt/aero/blob/master/README.md&#34;&gt;README&lt;/a&gt; does a good job describing
its motivations and design goals. Here&amp;rsquo;s how I&amp;rsquo;d describe it&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aero provides a library for reading config as EDN with added logic for a small set of
tag literals that &lt;strong&gt;make sense&lt;/strong&gt; for configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Reading some aero config is a simple as &lt;code&gt;(read-config source)&lt;/code&gt; where the source can be anything that
&lt;code&gt;clojure.java.io/reader&lt;/code&gt; supports (InputStream, File, URI, String etc). Here&amp;rsquo;s an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;; config.edn&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;or &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PORT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read-config&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;config.edn&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; {:port 8080}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s pretty &lt;strong&gt;obvious&lt;/strong&gt; that this bit of EDN, when read, should result in a map where
the &lt;code&gt;:port&lt;/code&gt; value will take on the value of the &lt;code&gt;PORT&lt;/code&gt; environment variable if it exists
otherwise it&amp;rsquo;ll be &lt;code&gt;8080&lt;/code&gt;. From this snippet we can see two of the tag literals
that aero supports &lt;code&gt;#or&lt;/code&gt; and &lt;code&gt;#env&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;profiles&#34;&gt;Profiles&lt;/h4&gt;

&lt;p&gt;When we configure our applications and tools more often than not we need the
configuration to control the behavior for a multiple set of circumstances.
The classic example is dev, staging and production environments. Aeros solution
is the &lt;code&gt;#profile&lt;/code&gt; tag. Here&amp;rsquo;s an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;; config.edn&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:prod&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9000&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:stage&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8000&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:default&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read-config&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;config.edn&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; {:port 8080}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read-config&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;config.edn&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:profile&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:qa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; {:port 8080}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read-config&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;config.edn&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:profile&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:prod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; {:port 9000}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read-config&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;config.edn&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:profile&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; {:port 8000}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: this isn&amp;rsquo;t just useful for server config we can use it for our tools as well. Have
you ever configured the clojurescript compiler with multiple builds that are
essentially the same? why not use Aero?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;including-more-config&#34;&gt;Including more config&lt;/h4&gt;

&lt;p&gt;One of the more interesting tag literals is &lt;code&gt;#include&lt;/code&gt; which essentially takes the tagged
value and passes it back to &lt;code&gt;read-config&lt;/code&gt; as the &lt;code&gt;source&lt;/code&gt; for further reading (as EDN). Nice! This means
we could split up config into multiple files. One case where this is helpful is secret
storage. We shouldn&amp;rsquo;t keep our secrets (API keys etc.) in source control alongside other
config. Instead we can include them from another location.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{:secrets #include &amp;quot;.secrets.edn&amp;quot;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But one question arises pretty quickly. Include &lt;code&gt;&amp;quot;.secrets.edn&amp;quot;&lt;/code&gt; relative to what?
The project directory? The file it was included from? The classpath? (for jars). Remember
&lt;code&gt;read-config&lt;/code&gt; requires the source to be compatible with &lt;code&gt;clojure.java.io/reader&lt;/code&gt;. What if
we wanted to include files through some other mechanism? Or what if we wanted to read in some
other format like json?&lt;/p&gt;

&lt;p&gt;Aero use the concept of a resolver which is just a function responsible for transforming the
&lt;code&gt;#include&lt;/code&gt; value into a valid source for &lt;code&gt;read-config&lt;/code&gt;. The default resolver will attempt to
resolve paths as files relative to the source it was included from. You can specify your own
include resolver in the options passed to &lt;code&gt;read-config&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I like Aero because it makes configuration obvious. It&amp;rsquo;s just EDN with some extra leverage
for common configuration tasks (env variables, profiles, etc.). For more on Aero check out
the &lt;a href=&#34;https://github.com/juxt/aero/blob/master/README.md&#34;&gt;README&lt;/a&gt; which covers all the tag literals, extensibility, references
and some recommended usage patterns.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upload and parse CSV in ClojureScript</title>
      <link>https://mrmcc3.github.io/post/csv-with-clojurescript/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mrmcc3.github.io/post/csv-with-clojurescript/</guid>
      <description>

&lt;p&gt;Here&amp;rsquo;s the scenario: Upload a &lt;a href=&#34;https://en.wikipedia.org/wiki/Comma-separated_values&#34;&gt;CSV&lt;/a&gt; file from your computer, parse it,
slice/dice/massage it into a form worth rendering, shove it in the DOM
for your viewing pleasure and then print it. I had the need to do this
recently for a friend. So here&amp;rsquo;s the result.&lt;/p&gt;

&lt;p&gt;First off, doing any data transformation in javascript isn&amp;rsquo;t my
idea of fun. I&amp;rsquo;d rather use immutable data structures and a well
thought out standard lib. So ClojureScript it is.&lt;/p&gt;

&lt;h4 id=&#34;rendering-the-upload-button&#34;&gt;Rendering the upload button&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s start by defining some data driven components with &lt;a href=&#34;https://reagent-project.github.io/&#34;&gt;reagent&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;upload-btn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:span.upload-label&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:label&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:input.hidden-xs-up&lt;/span&gt; 
     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:type&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:accept&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;.csv&amp;quot;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:on-change&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;put-upload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:i.fa.fa-upload.fa-lg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;or &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;click here to upload and render csv...&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file-name&lt;/span&gt; 
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:i.fa.fa-times&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:on-click&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;reset!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-state&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{})}])])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By hiding the input and wrapping it in a label we can customize the
look of the button. Also note the component is passed the &lt;code&gt;file-name&lt;/code&gt; which is
used to indicate the current uploaded file.&lt;/p&gt;

&lt;div id=&#34;csv-upload-imgs&#34;&gt;
&lt;img src=&#34;https://mrmcc3.github.io/images/post/csv-with-clojurescript/upload2.png&#34;&gt;&lt;/img&gt;
&lt;img src=&#34;https://mrmcc3.github.io/images/post/csv-with-clojurescript/upload1.png&#34;&gt;&lt;/img&gt;
&lt;/div&gt;

&lt;p&gt;Below is the root component (called &lt;code&gt;app&lt;/code&gt;) which just dereferences and destructures
the &lt;code&gt;app-state&lt;/code&gt; then feeds the requisite parts to the sub components.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:keys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app-state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:div.app&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;flyout&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:div.topbar.hidden-print&lt;/span&gt; 
      &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;upload-btn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;report&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;r/render-component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;js/document.getElementById&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far so good. The &lt;code&gt;report&lt;/code&gt; component renders the &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;flyout&lt;/code&gt;
component is a dev-only component which just pretty prints the current state
on a full-screen overlay (toggled with &lt;code&gt;cmd+shift+s&lt;/code&gt;. more on this in a future post).
But what happens when &lt;code&gt;put-upload&lt;/code&gt; is called? How is &lt;code&gt;data&lt;/code&gt; produced?&lt;/p&gt;

&lt;h4 id=&#34;handling-upload-events&#34;&gt;Handling upload events&lt;/h4&gt;

&lt;p&gt;The browser API docs and &lt;a href=&#34;https://developer.mozilla.org/en/docs/Using_files_from_web_applications&#34;&gt;examples&lt;/a&gt; show that hidden away in the event object
(triggered on upload) is a list of files. From there a &lt;code&gt;FileReader&lt;/code&gt; object can be
used to read from the file. The content is provided to the &lt;code&gt;onload&lt;/code&gt; callback of
the &lt;code&gt;FileReader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To re-phrase all that: We need a callback to get the selected file and another
callback to get the contents of that file. Rather than do the nested callback dance,
which is all too familiar to most JS developers, let&amp;rsquo;s use core.async!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;first-file&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.-currentTarget&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.-files&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;aget &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))]&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.-value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;extract-result&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.-target&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.-result&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;csv/parse&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;js-&amp;gt;clj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;upload-reqs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;first-file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file-reads&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;extract-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All the browser interop is handled by two transducers &lt;code&gt;first-file&lt;/code&gt; and &lt;code&gt;extract-result&lt;/code&gt;.
Transducers capture the essence of computation independent of the input source and output
destination.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-file&lt;/code&gt; accepts input change events and gets the first selected file. Also note that we
clear the target value. This allows re-uploading the same file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extract-result&lt;/code&gt; accepts a &lt;code&gt;FileReader&lt;/code&gt; onload event, gets the string contents,
parses the CSV and converts the result to ClojureScript data structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to parsing CSV we&amp;rsquo;re in luck! The &lt;code&gt;csv/parse&lt;/code&gt; function comes straight from the
built-in Google Closure library. You can find in the &lt;code&gt;goog.labs.format.csv&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;Next we define two channels one for upload requests and the other for file read events.
When defining the channels we supply the corresponding transducers to handle the browser interop.
This means we can expect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taking from &lt;code&gt;upload-reqs&lt;/code&gt; will produce file values&lt;/li&gt;
&lt;li&gt;taking from &lt;code&gt;file-reads&lt;/code&gt; will produce CSV as ClojureScript data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All that&amp;rsquo;s left is to wire up the channel logic so events flow through our channels.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;put-upload&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;put!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upload-reqs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;go-loop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;js/FileReader.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&amp;lt;!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upload-reqs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;swap!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-state&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;assoc &lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:file-name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.-onload&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;put!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file-reads&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.readAsText&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;recur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;go-loop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;swap!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-state&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;assoc &lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&amp;lt;!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file-reads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;recur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see &lt;code&gt;put-upload&lt;/code&gt; is just a callback that puts to the &lt;code&gt;upload-reqs&lt;/code&gt; channel.
The first go-loop is responsible for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taking files from the &lt;code&gt;upload-reqs&lt;/code&gt; channel&lt;/li&gt;
&lt;li&gt;updating the &lt;code&gt;file-name&lt;/code&gt; in the &lt;code&gt;app-state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;creating a &lt;code&gt;FileReader&lt;/code&gt; whose &lt;code&gt;onload&lt;/code&gt; event puts to the &lt;code&gt;file-reads&lt;/code&gt; channel&lt;/li&gt;
&lt;li&gt;starting the file reading process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the second go-loop we just take the data structures off the &lt;code&gt;file-reads&lt;/code&gt; channel
and swap them into the state.&lt;/p&gt;

&lt;h4 id=&#34;that-s-all-folks&#34;&gt;That&amp;rsquo;s all folks&lt;/h4&gt;

&lt;p&gt;At this point all the hard stuff is done. The remaining implementation is all
problem specific. We have the CSV data in hand so all that remains is to build
the reagent component &lt;code&gt;[report data]&lt;/code&gt; that renders it to the screen for viewing
and printing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>